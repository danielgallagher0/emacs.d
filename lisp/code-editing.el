(require 'thingatpt)

(defun my-doxymacs-insert-function-comment ()
  "Inserts the doxygen documentation for a function, the modifies it
to fit the expected documentation standard."
  (interactive)
  (doxymacs-insert-function-comment)
  (let ((start (search-backward "/")))
    (forward-char 1)
    (let ((end (search-forward "/")))
      (replace-string "@" "\\" nil start end)
      (replace-regexp " $" "" nil start end)
      (goto-char start)
      (next-line 1)
      (end-of-line)
      (insert " "))))

(defun automate-add-signature (signature &optional virtual-p pure-p)
  (setq *automate-signature* signature)
  (insert (format "%s%s%s;" (if virtual-p "virtual " "") signature (if (and virtual-p pure-p) " = 0" "")))
  (c-indent-command))

(defun automate-add-method (signature)
  (interactive "sFunction signature: ")
  (automate-add-signature signature nil nil))

(defun automate-add-pure-virtual (signature)
  (interactive "sFunction signature: ")
  (automate-add-signature signature t t))

(defun automate-add-virtual (signature)
  (interactive "sFunction signature: ")
  (automate-add-signature signature t nil))

(defun automate-add-last-virtual ()
  (interactive)
  (automate-add-virtual *automate-signature*))

(defun automate-add-function (signature &optional virtual-p)
  (interactive "sFunction signature: \nP")
  (setq *automate-signature* signature)
  (insert (format "%s%s\n{\n}\n\n" (if virtual-p "// virtual //\n" "") (insert-class-name signature))))

(defun automate-add-last-function (&optional virtual-p)
  (interactive "P")
  (automate-add-function *automate-signature* virtual-p))

(defun delete-spaces ()
  (while (= (char-after) 32)
    (delete-char 1)))

(defun qfetch-to-addcolumn (n)
  (interactive "p")
  (dotimes (i n nil)
    (kill-word 1)
    (insert "QTest::addColumn<")
    (delete-char 1)
    (delete-spaces)
    (search-forward ",")
    (delete-char -1) ; delete the comma
    (delete-spaces)
    (if (= ?> (char-before (point)))
        (insert " "))
    (insert ">( \"")
    (search-forward " ")
    (backward-char 1)
    (insert "\"")
    (c-indent-command)
    (beginning-of-line 2)))

(defun last-space-impl (str index)
  (let ((res (string-match " " str)))
    (if res
        (last-space-impl (substring str (1+ res)) (+ 1 index res))
      (1- index))))

(defun last-space (str)
  (and (string-match " " str)
       (last-space-impl str 0)))

(defun insert-class-name (signature)
  (let ((paren-index (string-match "(" signature)))
    (let ((after-paren (substring signature paren-index))
          (before-paren (substring signature 0 paren-index)))
      (let ((space-index (1+ (last-space before-paren))))
        (let ((before-space (substring before-paren 0 space-index))
              (after-space (substring before-paren space-index)))
          (concat before-space (class-for-current-buffer) "::" after-space after-paren))))))

(defun class-for-buffer (original-name)
  (apply #'s-concat (mapcar #'upcase-initials (string-split original-name "_"))))

(defun class-for-current-buffer ()
  (interactive)
  (class-for-buffer (file-name-base)))

(defun signature-to-definition (n)
  (interactive "p")
  (dotimes (i n nil)
    (beginning-of-line)
    (c-indent-line)
    (if (or (string= (current-word) "virtual")
            (string= (current-word) "static"))
        (progn
          (insert "// ")
          (forward-word 1)
          (forward-char 1)
          (insert "//\n")))
    (search-forward "(")
    (search-backward " ")
    (forward-char 1)
    (insert (format "%s::" (class-for-current-buffer)))
    (search-forward ")")
    (end-of-line)
    (delete-char -1)
    (if (string= (current-word) "override")
        (progn
          (kill-word -1)
          (delete-char -1)))
    (insert "\n{\n}\n")
    (next-line)))

(defun last-match-impl (best regexp string start)
  (let ((match (string-match regexp string start)))
    (if match
        (last-match-impl match regexp string (1+ match))
      best)))
(defun last-match (regexp string)
  (last-match-impl nil regexp string 0))

(defun corresponding-files (buffer)
  (let* ((slash-index (string-match "/" buffer))
         (file (if slash-index
                   (substring buffer (1+ slash-index))
                 buffer))
         (last-dot (last-match "\\." file)))
    (if last-dot
        (let ((base (substring file 0 last-dot))
              (extension (substring file (1+ last-dot))))
          (cond ((or (string= extension "cpp")
                     (string= extension "cc")
                     (string= extension "c")) (list (concat base ".h")))
                ((string= extension "h") (list (concat base ".cpp")
                                               (concat base ".cc")
                                               (concat base ".c")))
                (t (list file))))
      (list file))))

(defun try-open-files (files)
  (if files
      (if (file-exists-p (car files))
          (find-file (car files))
        (try-open-files (cdr files)))))

(defun open-corresponding-file ()
  (interactive)
  (let ((files (corresponding-files (buffer-name (current-buffer)))))
    (if (not (try-open-files files))
        (find-file (car files)))))

(defun trim-left (str)
  (if (string= " " (substring str 0 1))
      (trim-left (substring str 1))
    str))

(defun split-on-word (str)
  (trim-left (if (not case-fold-search)
                 (replace-regexp-in-string "[A-Z]" " \\&" str)
               (toggle-case-fold-search)
               (prog1
                   (replace-regexp-in-string "[A-Z]" " \\&" str)
                 (toggle-case-fold-search)))))

(defun include-guard-for-string (str)
  (upcase (replace-regexp-in-string " " "_"
                                    (replace-regexp-in-string "[\\.-/]" " "
                                                              (split-on-word str)))))

(defun insert-include-guard ()
  (interactive)
  (beginning-of-buffer)
  (let ((include-guard (include-guard-for-string (buffer-name (current-buffer)))))
    (insert "#ifndef ")
    (insert include-guard)
    (insert "\n#define ")
    (insert include-guard)
    (insert "\n")
    (goto-char (point-max))
    (insert "\n#endif\n")))

(defun greatest-equals-column ()
  (goto-char (point-min))
  (let ((acc 0)
        (found-column 0))
    (while found-column
      (setq acc (max found-column acc))
      (if (search-forward "=" nil t)
          (progn
            (backward-word 1)
            (forward-word 1)
            (setq found-column (1+ (current-column)))
            (search-forward "=" nil t)) ; Go to the equals sign we found
        (setq found-column nil)))
    acc))

(defun move-equals-column-to (col)
  (while (search-forward "=" nil t)
    (backward-word 1)
    (forward-word 1)
    (zap-up-to-char 1 ?=)
    (pad-to-column col)
    (forward-char 1)
    (insert " ")
    (delete-spaces)))

(defun align-assignments ()
  (interactive)
  (save-excursion
    (narrow-to-region (region-beginning) (region-end))
    (let ((equals-column (greatest-equals-column)))
      (goto-char (point-min))
      (move-equals-column-to equals-column))
    (widen)))

(defun insert-test-header ()
  (interactive)
  (let* ((test-case (class-for-current-buffer))
         (class-under-test (substring test-case 0 (- (length test-case) 4))))
    (insert-include-guard)
    (previous-line 2)
    (insert (format
"
#include <QObject>

class %s;

class %s : public QObject
{
    Q_OBJECT

private:

    %s* mpControl;

private slots:

    void init();
    void cleanup();


};
" class-under-test test-case class-under-test))
    (previous-line 2)))

(defun qproperty-read (n)
  (interactive "p")
  (dotimes (i n nil)
    (kill-word 2)
    (c-electric-delete-forward 1)
    (c-indent-line-or-region)
    (search-forward "READ")
    (let ((read-end (1+ (point))))
      (backward-word 2)
      (kill-region (point) read-end)
      (forward-word 1)
      (kill-line)
      (insert "() const;")
      (next-line)
      (beginning-of-line))))

(defun primitive-type-p (word)
  (or (null word)
      (string-equal word "bool")
      (string-equal word "signed")
      (string-equal word "unsigned")
      (string-equal word "char")
      (string-equal word "short")
      (string-equal word "int")
      (string-equal word "long")
      (string-equal word "float")
      (string-equal word "double")
      (string-equal word "int8_t")
      (string-equal word "uint8_t")
      (string-equal word "int16_t")
      (string-equal word "uint16_t")
      (string-equal word "int32_t")
      (string-equal word "uint32_t")
      (string-equal word "int64_t")
      (string-equal word "uint64_t")
      (string-equal word "qint8")
      (string-equal word "quint8")
      (string-equal word "qint16")
      (string-equal word "quint16")
      (string-equal word "qint32")
      (string-equal word "quint32")
      (string-equal word "qint64")
      (string-equal word "quint64")
      (string-equal word "qreal")))

(defun qproperty-write (n)
  (interactive "p")
  (dotimes (i n nil)
    (kill-word 2)
    (c-electric-delete-forward 1)
    (c-indent-line-or-region)
    (let ((type-begin (point)))
      (search-forward "READ")
      (backward-word 2)
      (backward-char 1)
      (kill-region type-begin (point)))
    (search-forward "WRITE")
    (forward-word 1)
    (insert "( ")
    (yank)
    (unless (primitive-type-p (word-at-point))
      (backward-word 1)
      (constify))
    (beginning-of-line)
    (c-indent-line-or-region)
    (kill-word 1)
    (search-forward "NOTIFY")
    (backward-word 1)
    (yank)
    (backward-word 1)
    (forward-char 1)
    (kill-word 1)
    (insert " );")
    (kill-line)
    (search-backward "WRITE")
    (forward-word)
    (let ((write-end (point)))
      (beginning-of-line)
      (kill-region (point) write-end))
    (c-indent-line-or-region)
    (insert "void ")
    (next-line)
    (beginning-of-line)
    (deactivate-mark)))

(defun qproperty-notify (n)
  (interactive "p")
  (dotimes (i n nil)
    (let ((var-begin (point)))
      (search-forward "NOTIFY ")
      (kill-region var-begin (point)))
    (insert "void ")
    (forward-word)
    (insert "(")
    (c-indent-line-or-region)
    (next-line)
    (beginning-of-line)))

(defun qproperty-member (n)
  (interactive "p")
  (dotimes (i n nil)
    (kill-word 2)
    (c-electric-delete-forward 1)
    (c-indent-line-or-region)
    (search-forward "READ")
    (backward-word 2)
    (insert "m")
    (forward-char 1)
    (insert " ")
    (backward-char 2)
    (capitalize-word 1)
    (c-electric-delete-forward 1)
    (forward-word)
    (insert ";")
    (kill-line)
    (next-line)
    (beginning-of-line)))

(defun constify ()
  (interactive)
  (insert "const ")
  (search-forward " ")
  (backward-char 1)
  (insert "&")
  (forward-word)
  (forward-char 2))

(defun setter-to-member (setter)
  (format "m%s" (substring setter 3)))

(defun setter-to-notify (setter)
  (concat (downcase (substring setter 3 4)) (substring setter 4) "Changed"))

(defun standard-slot (n)
  (interactive "p")
  (dotimes (i n nil)
    (beginning-of-line)
    (signature-to-definition 1)
    (backward-word 1)
    (let ((parameter (word-at-point)))
      (search-backward "::")
      (forward-char 2)
      (let ((member (setter-to-member (word-at-point)))
            (notify (setter-to-notify (word-at-point))))
        (next-line)
        (end-of-line)
        (newline)
        (insert (format "    if( %s != %s )
    {
        %s = %s;
        emit %s( %s );
    }" member parameter member parameter notify member))))
    (end-of-paragraph-text)
    (next-line 2)))

(defun trimmed (str)
  (replace-regexp-in-string "^\\W*\\|\\W*$" "" str))

(defun all-but-last-impl (acc lst)
  (if (= 1 (length lst))
      (reverse acc)
    (all-but-last-impl (cons (car lst) acc) (cdr lst))))

(defun all-but-last (lst)
  (all-but-last-impl '() lst))

(defun cpp-parse-parameter (param)
  (let ((declaration-only (trimmed (replace-regexp-in-string "const" "" (car (split-string param "="))))))
    (let ((words (split-string declaration-only)))
      (if (> (length words) 1)
          (let ((name (car (last words)))
                (type (reduce #'concat (all-but-last words))))
            (cons name type))
        (if (or (null words) (string= (car words) "void"))
            '()
          (cons "" (reduce #'concat words)))))))

(defun cpp-parse-parameter-list (params)
  (mapcar #'cpp-parse-parameter (split-string params ",")))

(defun cpp-parameters ()
  (save-excursion
    (c-beginning-of-defun)
    (let ((start (search-forward "(")))
      (search-forward-regexp "{\\|;")
      (let ((end (search-backward ")")))
        (cpp-parse-parameter-list (buffer-substring-no-properties start end))))))

(defun cpp-proxy-call (proxy)
  (interactive "sProxy variable: ")
  (search-forward "(")
  (forward-word -1)
  (let ((fn (word-at-point))
        (params (remove-if-not #'car (cpp-parameters))))
    (search-forward "{")
    (insert (if params
                (format "\n%s->%s( %s );\n" proxy fn
                        (reduce #'(lambda (acc n) (concat acc ", " n))
                                (mapcar #'car params)))
              (format "\n%s->%s();\n" proxy fn))))
  (previous-line)
  (c-indent-line)
  (next-line))

(defun cpp-record-call-impl (recorder module func)
  (let ((params (remove-if #'(lambda (n) (or (string= (car n) "failed")
                                             (string= (car n) "succeeded")
                                             (string= (car n) "success")))
                           (remove-if-not #'car (cpp-parameters)))))
    (search-forward "{")
    (insert "\n")
    (if params
        (progn
          (insert "QVariantMap payload;\n")
          (mapcar #'(lambda (p) (insert (format "payload[ \"%s\" ] = %s;\n" (car p) (car p)))) params)
          (insert (format "%sRecord( cEvent( %s, %s, payload ) );\n" recorder module func)))
      (insert (format "%sRecord( cEvent( %s, %s ) );\n" recorder module func))))
  (c-indent-defun))

(defun cpp-record-call-ptr (recorder module &optional func)
  (interactive "sRecorder variable: \nsModule string: ")
  (cpp-record-call-impl (concat recorder "->") module (or func "__func__")))

(defun cpp-record-call (recorder module &optional func)
  (interactive "sRecorder variable: \nsModule string: ")
  (cpp-record-call-impl (concat recorder ".") module (or func "__func__")))

(defun insert-cpp-parameter-list ()
  (interactive)
  (let ((params (remove-if-not #'car (cpp-parameters))))
    (if (= (length params) 0)
        (insert "")
      (insert (reduce #'(lambda (a n) (concat a ", " n))
                      (mapcar #'car params))))))

(defun align-switch ()
  (interactive)
  (let ((start-line (line-number-at-pos (point)))
        (end-line (line-number-at-pos (search-forward "default:"))) )
    (previous-line (- end-line start-line))
    (end-of-line)
    (search-backward "switch")
    (setq start-line (line-number-at-pos (search-forward "case")))
    (beginning-of-line)
    (let ((max-case 0)
          (max-assign 0)
          (current-line start-line) )
      (while (< (line-number-at-pos (point)) end-line)
        (search-forward "case ")
        (forward-word 1)
        (search-forward " ")
        (forward-word 1)
        (backward-word 1)
        (let ((case-distance (current-column)))
          (setq max-case (max max-case case-distance))
          (end-of-line)
          (backward-word 1)
          (setq max-assign (max max-assign (- (current-column) case-distance))) )
        (next-line)
        (beginning-of-line) )
      (previous-line (- end-line start-line))
      (while (< (line-number-at-pos (point)) end-line)
        (search-forward "case ")
        (forward-word 1)
        (search-forward " ")
        (forward-word 1)
        (backward-word 1)
        (pad-to-column max-case)
        (end-of-line)
        (backward-word 1)
        (pad-to-column (+ max-case max-assign))
        (next-line)
        (beginning-of-line) ))))

(defun cpp-recorded-proxy-from-signature (recorder module proxied-variable)
  (interactive "sRecorder variable: \nsModule: \nsProxied variable: ")
  (save-excursion
    (signature-to-definition 1)
    (let ((end (point)))
      (beginning-of-defun)
      (let ((start (point)))
        (narrow-to-region start end)
        (cpp-proxy-call proxied-variable)
        (beginning-of-defun)
        (cpp-record-call recorder module)
        (goto-char (point-max))
        (widen)))))

(defun cpp-standard-recorded-proxy-from-signature (n)
  (interactive "p")
  (dotimes (i n nil)
    (cpp-recorded-proxy-from-signature "mrEventLog" "mModule" "mpProxiedWidget")
    (end-of-defun)
    (previous-line)
    (delete-char -1)
    (next-line 2)))

(defun cpp-recorded-and-forwarded-signal-from-signature (recorder module)
  (interactive "sRecorder variable: \nsModule: ")
  (save-excursion
    (signature-to-definition 1)
    (let ((end (point)))
      (beginning-of-defun)
      (let ((start (point)))
        (narrow-to-region start end)
        (let ((params (remove-if-not #'car (cpp-parameters))))
          (search-forward "::")
          (let ((fn-name (word-at-point)))
            (end-of-defun)
            (previous-line)
            (insert (format "    emit %s" fn-name))
            (forward-word -1)
            (delete-char 2)
            (forward-word 1)
            (if (null params)
                (insert "();")
              (insert (format "( %s );" (reduce #'(lambda (a n) (concat a ", " n))
                                                (mapcar #'car params)))))
            (insert "\n")
            (beginning-of-defun)
            (cpp-record-call recorder module (concat "\"" (substring fn-name 2) "\"")))
          (goto-char (point-max))
          (widen))))))

(defun cpp-standard-recorded-and-forwarded-signal-from-signature (n)
  (interactive "p")
  (dotimes (i n nil)
    (cpp-recorded-and-forwarded-signal-from-signature "mrEventLog" "mModule")
    (end-of-defun)
    (next-line)))
